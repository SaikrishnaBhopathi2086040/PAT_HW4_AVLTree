/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 11 19:59:46 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1013));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(2032);
      aVLTree_Node0.key = 0;
      aVLTree_Node0.height = 5705;
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(1);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.delete(2032);
      aVLTree_Node0.height = 2032;
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.delete(2032);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.insert(2032);
      aVLTree0.insert(1672);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.insert((-5650));
      aVLTree0.insert(4643);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-649));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.height = 1;
      aVLTree_Node1.right = aVLTree_Node0;
      int int0 = 1285;
      aVLTree_Node1.right.height = 1285;
      aVLTree_Node0.right = aVLTree_Node1.right;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.height();
      int int1 = (-1037);
      aVLTree0.delete((-1037));
      int int2 = 674;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(484);
      aVLTree0.insert(2113);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree0.delete(0);
      int int0 = (-4319);
      aVLTree0.insert((-917));
      aVLTree0.insert((-4319));
      aVLTree_Node1.key = (-4319);
      aVLTree_Node1.height = 929;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(846);
      aVLTree0.insert((-1519));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-1519));
      aVLTree_Node1.height = 3006;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete((-882));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.insert((-5286));
      aVLTree0.insert((-1771));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1771));
      aVLTree_Node1.key = (-1771);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.right = aVLTree_Node1;
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-120));
      aVLTree0.insert(3353);
      aVLTree0.find(0);
      aVLTree0.insert(1);
      aVLTree0.delete((-1));
      aVLTree0.find((-373));
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert((-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-762));
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-762));
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.right.right = aVLTree_Node1;
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree_Node0.right.left = aVLTree_Node1;
      aVLTree_Node0.key = 0;
      aVLTree_Node0.left = aVLTree_Node1.left;
      aVLTree_Node0.right = null;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.find(3697);
      aVLTree0.height();
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-313));
      aVLTree0.insert(0);
      aVLTree0.delete(861);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(804);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.find((-266));
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-4388));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(2531);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(3561);
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      int int1 = 3117;
      aVLTree0.find(3117);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(311);
      aVLTree0.delete(0);
      int int0 = (-924);
      aVLTree0.insert((-924));
      int int1 = 0;
      aVLTree0.insert((-1952));
      aVLTree0.insert(0);
      aVLTree0.insert(4801);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-924));
      aVLTree_Node0.key = 4732;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      int int2 = (-3369);
      aVLTree0.delete((-3369));
      aVLTree_Node0.height = 2;
      int int3 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(int3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(1);
      aVLTree0.insert(1113);
      aVLTree0.delete(1);
      aVLTree0.insert((-150));
      aVLTree0.delete(238);
      aVLTree0.delete(238);
      aVLTree0.height();
      aVLTree0.insert((-1991));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-458));
      aVLTree0.insert(661);
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.insert((-1628));
      int int0 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1027));
      aVLTree0.insert((-1));
      aVLTree0.insert(1218);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.find(174);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(4801);
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(20);
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.delete(1979);
      int int0 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.delete(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(3545);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2889);
      aVLTree0.insert(2889);
      aVLTree0.insert(1342);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-295));
      aVLTree0.insert(0);
      aVLTree0.insert(846);
      aVLTree0.insert((-1519));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-1519));
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node1.height = 3006;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.right.height = 3006;
      aVLTree_Node0.right.height = 0;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete((-882));
      aVLTree0.find((-2076));
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.find(1);
      aVLTree0.delete((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.height();
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.find(0);
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      AVLTree aVLTree1 = new AVLTree();
      aVLTree1.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree1.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.height = (-1287);
      aVLTree_Node0.right = null;
      aVLTree_Node0.height = (-2300);
      aVLTree_Node0.key = 1837;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree1.find((-1));
      aVLTree1.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(119);
      aVLTree0.height();
      aVLTree0.delete((-558));
      aVLTree0.insert((-558));
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete((-1082));
      aVLTree0.delete(1060);
      aVLTree0.height();
      aVLTree0.find(0);
      aVLTree0.find(2196);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-714));
      aVLTree0.insert(0);
      aVLTree0.delete((-714));
      aVLTree0.delete(0);
      aVLTree0.delete(21);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(21);
      aVLTree0.delete((-2074));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3308);
      aVLTree0.height();
      aVLTree0.delete(1281);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(1281);
      aVLTree_Node0.left = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree0.new Node(3721);
      aVLTree_Node1.key = (-3740);
      aVLTree_Node0.right = aVLTree_Node2;
      aVLTree0.insert(1281);
      aVLTree0.getBalance(aVLTree_Node0);
      int int0 = 130;
      aVLTree0.insert(130);
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(130);
      aVLTree0.insert((-1001));
      aVLTree_Node0.left = aVLTree_Node3;
      aVLTree0.delete(1);
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
